{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","value","setValue","characterCount","setCharacterCount","wordCount","setWordCount","sentenceCount","setSentenceCount","paragraphCount","setParagraphCount","bigramCount","setBigramCount","trigramCount","setTrigramCount","useEffect","getCharacterCount","getWordCount","getSentenceCount","getParagraphCount","getBigramCount","getTrigramCount","noSpaces","replace","length","words","trim","split","sentences","notEmpty","i","numberParagraph","bigramWords","numberBigrams","bigram","trigramWords","numberTrigrams","trigram","className","TextField","id","label","multiline","fullWidth","style","margin","onChange","event","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAgHeA,MA3Gf,WACE,MAA0BC,IAAMC,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4CH,IAAMC,SAAS,GAA3D,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAkCL,IAAMC,SAAS,GAAjD,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA0CP,IAAMC,SAAS,GAAzD,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAA4CT,IAAMC,SAAS,GAA3D,mBAAOS,EAAP,KAAuBC,EAAvB,KACA,EAAsCX,IAAMC,SAAS,GAArD,mBAAOW,EAAP,KAAoBC,EAApB,KACA,EAAwCb,IAAMC,SAAS,GAAvD,mBAAOa,EAAP,KAAqBC,EAArB,KAEAf,IAAMgB,WAAU,WACdC,EAAkBf,GAClBgB,EAAahB,GACbiB,EAAiBjB,GACjBkB,EAAkBlB,GAClBmB,EAAenB,GACfoB,EAAgBpB,KAChB,CAACA,IAEH,IAIMe,EAAoB,SAACf,GACzB,IAAIqB,EAAWrB,EAAMsB,QAAQ,MAAO,IACpCnB,EAAkBkB,EAASE,SAGvBP,EAAe,SAAChB,GACpB,GAAIA,GAAmB,MAAVA,EAAe,CAC1B,IAAIwB,EAAQxB,EAAMyB,OAAOC,MAAM,KAC/BrB,EAAamB,EAAMD,UAIjBN,EAAmB,SAACjB,GACxB,GAAKA,EAAL,CAKA,IAFA,IAAI2B,EAAY3B,EAAM0B,MAAM,YACxBE,EAAW,EACNC,EAAI,EAAGA,EAAIF,EAAUJ,OAAQM,IAAK,CACtBF,EAAUE,GAAGJ,QAE9BG,IAGJrB,EAAiBqB,KAGbV,EAAoB,WACxB,GAAKlB,EAAL,CAGA,IAAI8B,EAAkB9B,EAAMsB,QAAQ,QAAS,IAAII,MAAM,MAAMH,OAC7Dd,EAAkBqB,KAGdX,EAAiB,WACrB,IAAIY,EAAc/B,EAAM0B,MAAM,KAC1BM,EAAiBC,YAAOF,GAAaR,OACzCZ,EAAeqB,IAGXZ,EAAkB,WACtB,IAAIc,EAAelC,EAAM0B,MAAM,KAC3BS,EAAkBC,YAAQF,GAAcX,OAC5CV,EAAgBsB,IAalB,OACE,sBAAKE,UAAU,MAAf,UACE,cAACC,EAAA,EAAD,CACEtC,MAAOA,EACPuC,GAAG,aACHC,MAAM,aACNC,WAAS,EACTC,WAAS,EACTC,MAAO,CAAEC,OAAQ,GACjBC,SAtEe,SAACC,GACpB7C,EAAS6C,EAAMC,OAAO/C,QAsElB4C,OAAO,WAET,sBAAKP,UAAU,WAAf,UACA,yDAA4BnC,KAC5B,oDAAuBE,KACvB,wDAA2BE,KAC3B,yDAA4BE,KAC5B,sDAAyBE,KACzB,uDAA0BE,KAE1B,wBAAQoC,QA9BY,WACtB7C,EAAkB,GAClBE,EAAa,GACbE,EAAiB,GACjBE,EAAkB,GAClBE,EAAe,GACfE,EAAgB,GAChBZ,EAAS,KAuBP,+BC5FSgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f0b7208a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {TextField} from \"@material-ui/core\";\nimport {bigram, trigram} from 'n-gram'\n\nfunction App() {\n  const [value, setValue] = React.useState(\"\");\n  const [characterCount, setCharacterCount] = React.useState(0)\n  const [wordCount, setWordCount] = React.useState(0)\n  const [sentenceCount, setSentenceCount] = React.useState(0)\n  const [paragraphCount, setParagraphCount] = React.useState(0)\n  const [bigramCount, setBigramCount] = React.useState(0)\n  const [trigramCount, setTrigramCount] = React.useState(0)\n  \n  React.useEffect(()=> {\n    getCharacterCount(value)\n    getWordCount(value)\n    getSentenceCount(value)\n    getParagraphCount(value)\n    getBigramCount(value)\n    getTrigramCount(value)\n  },[value])\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n  \n  const getCharacterCount = (value) => {\n    let noSpaces = value.replace(/\\s/g, '')\n    setCharacterCount(noSpaces.length)\n  }\n  \n  const getWordCount = (value) => {\n    if (value && value !== \" \") {\n      let words = value.trim().split(\" \")\n      setWordCount(words.length)\n    }\n  }\n\n  const getSentenceCount = (value) => {\n    if (!value) {\n      return\n    }\n    let sentences = value.split(/[\\\\.!\\?]/) //looked up regular expressions for sentences \n    let notEmpty = 0\n    for (var i = 0; i < sentences.length; i++) {\n      let trimSentence = sentences[i].trim()\n      if (trimSentence) {        \n        notEmpty ++\n      }\n    }\n    setSentenceCount(notEmpty)\n  }\n\n  const getParagraphCount = () => {\n    if (!value) {\n      return \n    }\n    let numberParagraph = value.replace(/\\n$/gm, '').split(/\\n/).length;\n    setParagraphCount(numberParagraph)\n  }\n\n  const getBigramCount = () => {\n    let bigramWords = value.split(\" \")\n    let numberBigrams = (bigram(bigramWords).length)\n    setBigramCount(numberBigrams)\n  }\n\n  const getTrigramCount = () => {\n    let trigramWords = value.split(\" \")\n    let numberTrigrams = (trigram(trigramWords).length)\n    setTrigramCount(numberTrigrams)\n  }\n\n  const clearEverything = () => {\n    setCharacterCount(0)\n    setWordCount(0)\n    setSentenceCount(0)\n    setParagraphCount(0)\n    setBigramCount(0)\n    setTrigramCount(0)\n    setValue(\"\")\n  }\n  \n  return (\n    <div className=\"App\">\n      <TextField\n        value={value}\n        id=\"first-name\"\n        label=\"Enter Text\"\n        multiline\n        fullWidth\n        style={{ margin: 8}}\n        onChange={handleChange}\n        margin=\"normal\"\n      />\n      <div className=\"Counters\">\n      <p>The Character Count is: {characterCount}</p>\n      <p>The Word Count is: {wordCount}</p>\n      <p>The Sentence Count is: {sentenceCount}</p>\n      <p>The Paragraph Count is: {paragraphCount}</p>\n      <p>The Bigram Count is: {bigramCount}</p>\n      <p>The Trigram Count is: {trigramCount}</p>\n\n      <button onClick={clearEverything}>CLEAR DATA</button>\n      </div>\n\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}